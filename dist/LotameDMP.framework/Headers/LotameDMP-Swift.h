// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSError;
@class LotameProfile;

/// The Lotame Data Management Platform
SWIFT_CLASS("_TtC9LotameDMP3DMP")
@interface DMP : NSObject
/// LotameDMP is a singleton.  Calls should be made to the class functions, which
/// will use this sharedManager as an object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DMP * _Nonnull sharedManager;)
+ (DMP * _Nonnull)sharedManager SWIFT_WARN_UNUSED_RESULT;
/// Gets the IDFA or nil if it is not enabled.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable advertisingId;)
+ (NSString * _Nullable)advertisingId SWIFT_WARN_UNUSED_RESULT;
/// Tracking is enabled only if advertising id is enabled on the user’s device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL trackingEnabled;)
+ (BOOL)trackingEnabled SWIFT_WARN_UNUSED_RESULT;
/// The domain of the base urls for the network calls. Defaults to crwdcntrl.net
@property (nonatomic, copy) NSString * _Nonnull domain;
/// The protocol to use for the network calls. Defaults to https.
/// Changing to http will require special settings in Info.plist to disable
/// ATS.
@property (nonatomic, copy) NSString * _Nonnull httpProtocol;
/// The DMP is a singleton, use the initialize method to set the values in the singleton
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Call this first to initialize the singleton. Only needs to be called once.
/// Starts a new session, sets the domain to default “crwdcntrl.net” and httpProtocol to default “https”
/// <ul>
///   <li>
///   </li>
/// </ul>
+ (void)initialize:(NSString * _Nonnull)clientId;
/// Starts a new page view session
+ (void)startNewSession;
/// Used by objective-c code that does not support generics. Do not use in swift. Use sendBehaviorData instead
+ (void)sendBehaviorDataWithHandler:(void (^ _Nonnull)(NSError * _Nullable))handler;
/// Sends the collected behavior data to the Lotame server without a completion handler
+ (void)sendBehaviorData;
/// Collects behavior data with any type and value
+ (void)addBehaviorData:(NSString * _Nullable)value forType:(NSString * _Nonnull)key;
/// Collects a specific behavior id
+ (void)addBehaviorDataWithBehaviorId:(int64_t)behaviorId;
/// Collects a specific opportunity id
+ (void)addBehaviorDataWithOpportunityId:(int64_t)opportunityId;
/// Used by objective-c code that does not support generics. Do not use in swift. Use getAudienceData instead
+ (void)getAudienceDataWithHandler:(void (^ _Nonnull)(LotameProfile * _Nullable, BOOL))handler;
@end

@class NSDictionary;

SWIFT_CLASS("_TtC9LotameDMP14LotameAudience")
@interface LotameAudience : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable jsonString;
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull json;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull abbreviation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, LotameError) {
  LotameErrorTrackingDisabled = 0,
  LotameErrorInitializeNotCalled = 1,
  LotameErrorUnexpectedResponse = 2,
  LotameErrorInvalidURL = 3,
};
static NSString * _Nonnull const LotameErrorDomain = @"LotameDMP.LotameError";


SWIFT_CLASS("_TtC9LotameDMP13LotameProfile")
@interface LotameProfile : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull pid;
@property (nonatomic, copy) NSArray<LotameAudience *> * _Nonnull audiences;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonString;
/// \code
/// {
///    "Profile" : {
///        "pid" : "ccd93ea4d2b2182cdb480a28c93b83f5"
///    }
/// }
///
/// // or with audiences:
///
/// {
///    "pid" : "M518E7D21-89E6-4A57-919E-B4FAF3CFFB87",
///    "Audiences" : {
///        "Audience" : [
///            {
///                "id" : "141",
///                "abbr" : "all"
///            }
///        ]
///    }
/// }
///
/// \endcode
@property (nonatomic, readonly, strong) NSDictionary * _Nonnull json;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface NSDictionary (SWIFT_EXTENSION(LotameDMP))
- (NSString * _Nullable)rawString SWIFT_WARN_UNUSED_RESULT;
@end

#pragma clang diagnostic pop
